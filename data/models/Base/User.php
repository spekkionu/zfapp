<?php

/**
 * Base_User
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $username
 * @property string $password
 * @property string $firstname
 * @property string $lastname
 * @property string $email
 * @property integer $active
 * @property timestamp $date_created
 * @property timestamp $last_login
 * @property string $accesslevel
 * @property string $token
 * @property date $token_date
 * 
 * @package    App
 * @subpackage Model
 * @author     spekkionu <spekkionu@gmail.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class Base_User extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('users');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'unsigned' => true,
             'autoincrement' => true,
             'comment' => 'primary key',
             'length' => '4',
             ));
        $this->hasColumn('username', 'string', 25, array(
             'type' => 'string',
             'notblank' => true,
             'notnull' => true,
             'unique' => true,
             'comment' => 'The username the user logs in with',
             'length' => '25',
             ));
        $this->hasColumn('password', 'string', 60, array(
             'type' => 'string',
             'fixed' => 1,
             'comment' => 'The password the user logs in with',
             'length' => '60',
             ));
        $this->hasColumn('firstname', 'string', 32, array(
             'type' => 'string',
             'notblank' => true,
             'notnull' => true,
             'comment' => 'The first name of the user',
             'length' => '32',
             ));
        $this->hasColumn('lastname', 'string', 64, array(
             'type' => 'string',
             'notblank' => true,
             'notnull' => true,
             'comment' => 'The last name of the user',
             'length' => '64',
             ));
        $this->hasColumn('email', 'string', 127, array(
             'type' => 'string',
             'notnull' => true,
             'notblank' => true,
             'unique' => true,
             'comment' => 'The email address of the user',
             'length' => '127',
             ));
        $this->hasColumn('active', 'integer', 1, array(
             'type' => 'integer',
             'default' => 0,
             'notnull' => true,
             'unsigned' => true,
             'comment' => 'Only active users may log in.',
             'length' => '1',
             ));
        $this->hasColumn('date_created', 'timestamp', null, array(
             'type' => 'timestamp',
             'notnull' => true,
             'comment' => 'The date the user account was created.',
             ));
        $this->hasColumn('last_login', 'timestamp', null, array(
             'type' => 'timestamp',
             'comment' => 'The date the user last logged in.',
             ));
        $this->hasColumn('accesslevel', 'string', 50, array(
             'type' => 'string',
             'notblank' => true,
             'notnull' => true,
             'default' => 'user',
             'comment' => 'The access level of the user',
             'length' => '50',
             ));
        $this->hasColumn('token', 'string', 32, array(
             'type' => 'string',
             'fixed' => 1,
             'comment' => 'Token used for password reset',
             'length' => '32',
             ));
        $this->hasColumn('token_date', 'date', null, array(
             'type' => 'date',
             'comment' => 'Date the password reset token expires.',
             ));


        $this->index('login', array(
             'fields' => 
             array(
              0 => 'username',
              1 => 'password',
              2 => 'active',
             ),
             'type' => 'unique',
             ));
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
        $this->option('type', 'INNODB');
    }

    public function setUp()
    {
        parent::setUp();
        
    }
}