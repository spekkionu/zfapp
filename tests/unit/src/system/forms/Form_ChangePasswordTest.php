<?php

/**
 * Test class for Form_ChangePassword.
 * Generated by PHPUnit on 2012-06-02 at 14:25:28.
 */
class Form_ChangePasswordTest extends PHPUnit_Framework_TestCase
{

  public function testValidation() {
    $form = new Form_ChangePassword();
    // Remove csrf token for testing
    $form->removeElement('csrf');
    $data = array(
      'pin' => '1234',
      'old_password' => 'oldpassword',
      'password' => 'password',
      'confirm_password' => 'password'
    );
    $valid = $form->isValid($data);
    $this->assertTrue($valid);
  }

  public function testMissingPin() {
    $form = new Form_ChangePassword();
    // Remove csrf token for testing
    $form->removeElement('csrf');
    $data = array(
      'pin' => null,
      'old_password' => 'oldpassword',
      'password' => 'password',
      'confirm_password' => 'password',
    );
    $valid = $form->isValid($data);
    $this->assertFalse($valid);
    $errors = $form->getElement('pin')->getErrors();
    $this->assertContains('isEmpty', $errors);
  }

  public function testInvalidPin() {
    $form = new Form_ChangePassword();
    // Remove csrf token for testing
    $form->removeElement('csrf');
    $data = array(
      'old_password' => 'oldpassword',
      'password' => 'password',
      'pin' => 'g b4%6^&',
      'confirm_password' => 'password',
    );
    $valid = $form->isValid($data);
    $this->assertFalse($valid);
    $errors = $form->getElement('pin')->getErrors();
    $this->assertContains(Zend_Validate_Regex::NOT_MATCH, $errors);
  }

  public function testMissingOldPassword() {
    $form = new Form_ChangePassword();
    // Remove csrf token for testing
    $form->removeElement('csrf');
    $data = array(
      'pin' => '1234',
      'old_password' => null,
      'password' => 'password',
      'confirm_password' => 'password',
    );
    $valid = $form->isValid($data);
    $this->assertFalse($valid);
    $errors = $form->getElement('old_password')->getErrors();
    $this->assertContains('isEmpty', $errors);
  }

  public function testMissingPassword() {
    $form = new Form_ChangePassword();
    // Remove csrf token for testing
    $form->removeElement('csrf');
    $data = array(
      'pin' => '1234',
      'old_password' => 'password',
      'password' => null,
      'confirm_password' => 'password',
    );
    $valid = $form->isValid($data);
    $this->assertFalse($valid);
    $errors = $form->getElement('password')->getErrors();
    $this->assertContains('isEmpty', $errors);
  }

  public function testInvalidPassword() {
    $form = new Form_ChangePassword();
    // Remove csrf token for testing
    $form->removeElement('csrf');
    $data = array(
      'old_password' => 'oldpassword',
      'password' => 'gh ghg %#@',
      'pin' => '1234',
      'confirm_password' => 'password',
    );
    $valid = $form->isValid($data);
    $this->assertFalse($valid);
    $errors = $form->getElement('password')->getErrors();
    $this->assertContains(Zend_Validate_Regex::NOT_MATCH, $errors);
  }

  public function testPasswordNotMatch() {
    $form = new Form_ChangePassword();
    // Remove csrf token for testing
    $form->removeElement('csrf');
    $data = array(
      'old_password' => 'oldpassword',
      'password' => 'password',
      'pin' => '1234',
      'confirm_password' => 'different',
    );
    $valid = $form->isValid($data);
    $this->assertFalse($valid);
    $errors = $form->getElement('confirm_password')->getErrors();
    $this->assertContains(Zend_Validate_Identical::NOT_SAME, $errors);
  }

}

