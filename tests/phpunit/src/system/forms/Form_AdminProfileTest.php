<?php

/**
 * Test class for Form_AdminProfile.
 * Generated by PHPUnit on 2012-06-02 at 13:39:05.
 */
class Form_AdminProfileTest extends PHPUnit_Framework_TestCase
{

  public function testValidation() {
    $form = new Form_AdminProfile();
    // Remove csrf token for testing
    $form->removeElement('csrf');
    $data = array(
      'username' => 'username',
      'password' => 'password',
      'confirm_password' => 'password',
      'firstname' => 'Firstname',
      'lastname' => 'Lastname',
      'email' => 'email@address.com',
      'active' => '1',
    );
    $valid = $form->isValid($data);
    $this->assertTrue($valid);
  }

  public function testMissingUsername() {
    $form = new Form_AdminProfile();
    // Remove csrf token for testing
    $form->removeElement('csrf');
    $data = array(
      'username' => null,
      'password' => 'password',
      'confirm_password' => 'password',
      'firstname' => 'Firstname',
      'lastname' => 'Lastname',
      'email' => 'email@address.com',
      'active' => '1',
    );
    $valid = $form->isValid($data);
    $this->assertFalse($valid);
    $errors = $form->getElement('username')->getErrors();
    $this->assertContains('isEmpty', $errors);
  }

  public function testInvalidUsername() {
    $form = new Form_AdminProfile();
    // Remove csrf token for testing
    $form->removeElement('csrf');
    $data = array(
      'username' => 'gh ghg %#@',
      'password' => 'password',
      'confirm_password' => 'password',
      'firstname' => 'Firstname',
      'lastname' => 'Lastname',
      'email' => 'email@address.com',
      'active' => '1',
    );
    $valid = $form->isValid($data);
    $this->assertFalse($valid);
    $errors = $form->getElement('username')->getErrors();
    $this->assertContains('notAlnum', $errors);
  }

  public function testMissingPassword() {
    $form = new Form_AdminProfile();
    // Remove csrf token for testing
    $form->removeElement('csrf');
    $data = array(
      'username' => 'username',
      'password' => null,
      'confirm_password' => 'password',
      'firstname' => 'Firstname',
      'lastname' => 'Lastname',
      'email' => 'email@address.com',
      'active' => '1',
    );
    $valid = $form->isValid($data);
    $this->assertFalse($valid);
    $errors = $form->getElement('password')->getErrors();
    $this->assertContains('isEmpty', $errors);
  }

  public function testInvalidPassword() {
    $form = new Form_AdminProfile();
    // Remove csrf token for testing
    $form->removeElement('csrf');
    $data = array(
      'password' => 'gh ghg %#@',
      'username' => 'username',
      'confirm_password' => 'password',
      'firstname' => 'Firstname',
      'lastname' => 'Lastname',
      'email' => 'email@address.com',
      'active' => '1',
    );
    $valid = $form->isValid($data);
    $this->assertFalse($valid);
    $errors = $form->getElement('password')->getErrors();
    $this->assertContains(Zend_Validate_Regex::NOT_MATCH, $errors);
  }

  public function testPasswordNotMatch() {
    $form = new Form_AdminProfile();
    // Remove csrf token for testing
    $form->removeElement('csrf');
    $data = array(
      'password' => 'password',
      'username' => 'username',
      'confirm_password' => 'different',
      'firstname' => 'Firstname',
      'lastname' => 'Lastname',
      'email' => 'email@address.com',
      'active' => '1',
    );
    $valid = $form->isValid($data);
    $this->assertFalse($valid);
    $errors = $form->getElement('confirm_password')->getErrors();
    $this->assertContains(Zend_Validate_Identical::NOT_SAME, $errors);
  }

  public function testMissingFirstname() {
    $form = new Form_AdminProfile();
    // Remove csrf token for testing
    $form->removeElement('csrf');
    $data = array(
      'username' => 'username',
      'password' => 'password',
      'confirm_password' => 'password',
      'firstname' => null,
      'lastname' => 'Lastname',
      'email' => 'email@address.com',
      'active' => '1',
    );
    $valid = $form->isValid($data);
    $this->assertFalse($valid);
    $errors = $form->getElement('firstname')->getErrors();
    $this->assertContains('isEmpty', $errors);
  }

  public function testMissingLastname() {
    $form = new Form_AdminProfile();
    // Remove csrf token for testing
    $form->removeElement('csrf');
    $data = array(
      'username' => 'username',
      'password' => 'password',
      'confirm_password' => 'password',
      'firstname' => 'firstname',
      'lastname' => null,
      'email' => 'email@address.com',
      'active' => '1',
    );
    $valid = $form->isValid($data);
    $this->assertFalse($valid);
    $errors = $form->getElement('lastname')->getErrors();
    $this->assertContains('isEmpty', $errors);
  }

  public function testMissingEmail() {
    $form = new Form_AdminProfile();
    // Remove csrf token for testing
    $form->removeElement('csrf');
    $data = array(
      'username' => 'username',
      'password' => 'password',
      'confirm_password' => 'password',
      'firstname' => 'firstname',
      'lastname' => 'lastname',
      'email' => null,
      'active' => '1',
    );
    $valid = $form->isValid($data);
    $this->assertFalse($valid);
    $errors = $form->getElement('email')->getErrors();
    $this->assertContains('isEmpty', $errors);
  }

  public function testInvalidEmail() {
    $form = new Form_AdminProfile();
    // Remove csrf token for testing
    $form->removeElement('csrf');
    $data = array(
      'username' => 'username',
      'password' => 'password',
      'confirm_password' => 'password',
      'firstname' => 'firstname',
      'lastname' => 'lastname',
      'email' => 'invalid email',
      'active' => '1',
    );
    $valid = $form->isValid($data);
    $this->assertFalse($valid);
    $errors = $form->getErrors();
    $this->assertArrayHasKey('email', $errors);
  }

}

